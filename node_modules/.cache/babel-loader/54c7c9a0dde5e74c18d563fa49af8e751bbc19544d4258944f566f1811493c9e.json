{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ungati_mohith\\\\Downloads\\\\react-website\\\\react-website-v1-master\\\\src\\\\components\\\\pages\\\\UserList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './UserList.css'; // Import CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserList = () => {\n  _s();\n  const [claims, setClaims] = useState([]);\n  const [expandedClaimId, setExpandedClaimId] = useState(null);\n  useEffect(() => {\n    const fetchClaims = async () => {\n      const response = await fetch('http://localhost:8080/claim/user/mohith.ungati@gmail.com');\n      if (response.ok) {\n        const data = await response.json();\n        setClaims(data); // Store the array of claims directly\n      } else {\n        console.error('Failed to fetch claims:', response.statusText);\n      }\n    };\n    fetchClaims();\n  }, []);\n  const handleExpand = id => {\n    setExpandedClaimId(expandedClaimId === id ? null : id);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"claim-view-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Your Submitted Claims\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"claim-list\",\n      children: claims.map(claim => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"claim-card\",\n        onClick: () => handleExpand(claim.id),\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Claim ID: \", claim.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Email: \", claim.userEmail]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Amount Claimed: $\", claim.amountClaimed.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Status: \", claim.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), expandedClaimId === claim.id && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"admin-remarks\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Admin Remarks:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 20\n            }, this), \" \", claim.adminRemarks]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this)]\n      }, claim.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(UserList, \"xbFbHu3B3xsYqbH4O6Jd4E9Exlc=\");\n_c = UserList;\nexport default UserList;\nvar _c;\n$RefreshReg$(_c, \"UserList\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","UserList","_s","claims","setClaims","expandedClaimId","setExpandedClaimId","fetchClaims","response","fetch","ok","data","json","console","error","statusText","handleExpand","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","claim","onClick","userEmail","amountClaimed","toFixed","status","adminRemarks","_c","$RefreshReg$"],"sources":["C:/Users/ungati_mohith/Downloads/react-website/react-website-v1-master/src/components/pages/UserList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './UserList.css'; // Import CSS for styling\n\nconst UserList = () => {\n  const [claims, setClaims] = useState([]);\n  const [expandedClaimId, setExpandedClaimId] = useState(null);\n\n  useEffect(() => {\n    const fetchClaims = async () => {\n      const response = await fetch('http://localhost:8080/claim/user/mohith.ungati@gmail.com');\n      if (response.ok) {\n        const data = await response.json();\n        setClaims(data); // Store the array of claims directly\n      } else {\n        console.error('Failed to fetch claims:', response.statusText);\n      }\n    };\n    fetchClaims();\n  }, []);\n\n  const handleExpand = (id) => {\n    setExpandedClaimId(expandedClaimId === id ? null : id);\n  };\n\n  return (\n    <div className=\"claim-view-container\">\n      <h1>Your Submitted Claims</h1>\n      <div className=\"claim-list\">\n        {claims.map((claim) => (\n          <div \n            key={claim.id} \n            className=\"claim-card\" \n            onClick={() => handleExpand(claim.id)}\n          >\n            <h2>Claim ID: {claim.id}</h2>\n            <p>Email: {claim.userEmail}</p>\n            <p>Amount Claimed: ${claim.amountClaimed.toFixed(2)}</p>\n            <p>Status: {claim.status}</p>\n            {expandedClaimId === claim.id && (\n              <div className=\"admin-remarks\">\n                <p><strong>Admin Remarks:</strong> {claim.adminRemarks}</p>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default UserList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}